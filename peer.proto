syntax = "proto3";
option go_package = "github.com/yousuf64/chord-kv/remote/transport";
import "google/protobuf/empty.proto";

service Peer {
  rpc FindSuccessor (FindSuccessorRequest) returns (FindSuccessorReply) {}
  rpc SetSuccessor (SetSuccessorRequest) returns (google.protobuf.Empty) {}
  rpc SetPredecessor (SetPredecessorRequest) returns (google.protobuf.Empty) {}
  rpc Notify (NotifyRequest) returns (NotifyReply) {}
  rpc GetPredecessor (google.protobuf.Empty) returns (GetPredecessorReply) {}
  rpc Leave(google.protobuf.Empty) returns (google.protobuf.Empty) {}
  rpc Healthz(google.protobuf.Empty) returns (google.protobuf.Empty) {}

  rpc Insert(InsertRequest) returns (google.protobuf.Empty) {}
  rpc Query(QueryRequest) returns (QueryReply) {}
}

message SetSuccessorRequest {
  string address = 1;
}

message SetPredecessorRequest {
  string address = 1;
}

message FindSuccessorRequest {
  uint64 id = 1;
}

message FindSuccessorReply {
  string address = 1;
}

message NotifyRequest {
  string address = 1;
}

message NotifyReply {
  repeated InsertItem items = 1;
}

message GetPredecessorReply {
  string address = 1;
}

message InsertRequest {
  repeated InsertItem items = 1;
}

message InsertItem {
  string index = 1;
  string key = 2;
  string value = 3;
}

message QueryRequest {
  string index = 1;
  string query = 2;
}

message QueryReply {
  string value = 1;
}

// GRPC Server -- routes to -- Chord
// Chord -- Clients > PeerClient


// Lord of the Ring